# SPDX-FileCopyrightText: 2024 Helio Chissini de Castro <heliocastro@gmail.com>
# SPDX-License-Identifier: MIT

name: "Docker Build Control"
description: "Check and create docker image if not exists"
author: "Helio Chissini de Castro <heliocastro@gmail.com>"

inputs:
  registry:
    description: "GitHub container registry"
    default: "ghcr.io"
  token:
    description: "GitHub token"
    required: true
  name:
    description: "Image name"
    required: true
  target:
    description: "Target in the Dockerfile"
    required: false
  images:
    description: "Custom image names"
    required: false
  labels:
    description: "List of custom labels for docker image"
    required: false
  version:
    description: "Image version"
    required: true
  invalidate-cache:
    description: 'Build all images disregarding exists same version'
    required: false
  build-args:
    description: "List of build-time variables"
    required: false
  build-contexts:
    description: "Add extra context translation for the image"
    required: false
  secret-files:
    description: "Pass secrets as build info"
    required: false
  platforms:
    description: "Enable multi platform builds. Supported linux/amd64(default) and linux/arm64, comma separated"
    required: false
  debug:
    description: "Debug check_image script"
    required: false

outputs:
  image_version:
    description: "Generated image version"
    value: ${{ steps.check_image.outputs.image_version }}

runs:
  using: "composite"

  steps:
    - name: Checkout necessary files
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        repository: heliocastro/docker-build-control
        path: docker-build-control

    - name: Install Python
      uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Check if Docker image tag exists
      id: check_image
      shell: bash
      env:
        INPUT_REGISTRY: ${{ inputs.registry }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_NAME: ${{ inputs.name }}
        INPUT_VERSION: ${{ inputs.version }}
        BUILD_ARGS: ${{ inputs.build-args }}
        INVALIDATE_CACHE: ${{ inputs.invalidate-cache }}
        ACTION_DEBUG: ${{ inputs.debug }}
        DEFAULT_IMAGE: ${{ inputs.registry }}/${{ github.repository }}/${{ inputs.name }}
      run: |
        pip install -q -U pip requests rich
        python ${{ github.workspace }}/docker-build-control/src/check_image.py

    - name: Setup QEMU
      if: steps.check_image.outputs.result != 'found' && ${{ inputs.platforms }}
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

    - name: Set up Docker build
      if: steps.check_image.outputs.result != 'found'
      uses: docker/setup-buildx-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4

    - name: Login to GitHub container registry
      if: steps.check_image.outputs.result != 'found'
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.token }}

    - name: Extract components metadata (tags, labels)
      if: steps.check_image.outputs.result != 'found'
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
      with:
        images: ${{ inputs.images || env.DEFAULT_IMAGE }}
        tags: |
          type=schedule,pattern={{date 'YYYYMMDD'}}
          type=schedule,pattern=snapshot
          type=semver,pattern={{version}}
          type=raw,value=${{ inputs.version }}
          type=raw,value=${{ steps.check_image.outputs.image_version }}
          type=ref,event=tag
        labels: ${{ inputs.labels }}

    - name: Build image
      if: steps.check_image.outputs.result != 'found'
      uses: docker/build-push-action@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        context: .
        target: ${{ inputs.target || inputs.name }}
        platforms: ${{ inputs.platforms }}
        push: true
        load: false
        build-args: ${{ inputs.build-args }}
        tags: |
          ${{ steps.meta.outputs.tags }}
        labels: |
          ${{ steps.meta.outputs.labels }}
        build-contexts: ${{ inputs.build-contexts }}
        secret-files: ${{ inputs.secret-files }}
        provenance: mode=max
        sbom: true

